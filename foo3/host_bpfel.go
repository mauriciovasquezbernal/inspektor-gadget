// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type hostKey struct{ Key uint32 }

type hostValue struct {
	Bar1   uint64
	Field1 uint64
	Field2 uint64
	Bar2   uint64
}

// loadHost returns the embedded CollectionSpec for host.
func loadHost() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_HostBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load host: %w", err)
	}

	return spec, err
}

// loadHostObjects loads host and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*hostObjects
//	*hostPrograms
//	*hostMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadHostObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadHost()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// hostSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hostSpecs struct {
	hostProgramSpecs
	hostMapSpecs
	hostVariableSpecs
}

// hostProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hostProgramSpecs struct {
	IgExecveatE *ebpf.ProgramSpec `ebpf:"ig_execveat_e"`
}

// hostMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hostMapSpecs struct {
	GadgetMap *ebpf.MapSpec `ebpf:"gadget_map"`
}

// hostVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hostVariableSpecs struct {
}

// hostObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadHostObjects or ebpf.CollectionSpec.LoadAndAssign.
type hostObjects struct {
	hostPrograms
	hostMaps
	hostVariables
}

func (o *hostObjects) Close() error {
	return _HostClose(
		&o.hostPrograms,
		&o.hostMaps,
	)
}

// hostMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadHostObjects or ebpf.CollectionSpec.LoadAndAssign.
type hostMaps struct {
	GadgetMap *ebpf.Map `ebpf:"gadget_map"`
}

func (m *hostMaps) Close() error {
	return _HostClose(
		m.GadgetMap,
	)
}

// hostVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadHostObjects or ebpf.CollectionSpec.LoadAndAssign.
type hostVariables struct {
}

// hostPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadHostObjects or ebpf.CollectionSpec.LoadAndAssign.
type hostPrograms struct {
	IgExecveatE *ebpf.Program `ebpf:"ig_execveat_e"`
}

func (p *hostPrograms) Close() error {
	return _HostClose(
		p.IgExecveatE,
	)
}

func _HostClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed host_bpfel.o
var _HostBytes []byte
