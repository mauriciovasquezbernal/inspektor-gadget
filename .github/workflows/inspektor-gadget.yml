name: Inspektor Gadget CI
env:
  REGISTRY: ghcr.io
  CONTAINER_REPO: ${{ github.repository }}
  GO_VERSION: 1.24.4
  # controller-gen with go >1.21 panics, but we can't update controller-gen itself
  GO_VERSION_DOC_CHECK: 1.21.3
  AZURE_AKS_CLUSTER_PREFIX: ig-ci-aks-
  DEFAULT_DNSTESTER_IMAGE: ghcr.io/inspektor-gadget/dnstester:main
  DEFAULT_GADGET_BUILDER_IMAGE: ghcr.io/inspektor-gadget/gadget-builder:main
  # With the recent update of docker/build-push-action to v6, this action
  # started creating docker build summary files (i.e. .dockerbuild).
  # Sadly, these files create troubles when trying to download artifact in the
  # release job as they seem to not be downloadable.
  # So, for now, let's deactivate this feature.
  DOCKER_BUILD_NO_SUMMARY: true
concurrency:
  group: ${{ github.ref }}
  # We do not want to cancel job in progress on main to be sure to catch new
  # regression as soon as they are introduced.
  cancel-in-progress: ${{ github.ref_name != 'main' }}
on:
  pull_request:
  push:
    branches:
    - main
    - 'release-*'
    - 'citest/**'
    tags:
    - 'v*'
  workflow_dispatch:

permissions: read-all

# Jobs are given a level in a comment.
# Jobs of the same level run in parallel.
# Jobs of level N depend of, at least, one job on level N - 1 expect job whom
# level is 0.
jobs:
  pr-dependencies-checks:
    name: PR dependencies checks
    # level: 0
    # We need to run this action only on PR.
    # Otherwise, for other cases like pushing to main, it will fail because it
    # searches for base_ref and head_ref which only exists in PR context.
    if: ${{ github.event.pull_request }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Check if added dependencies do not contain CVE.
        uses: actions/dependency-review-action@da24556b548a50705dd671f47852072ea4c105d9 # v4.7.1

  build-clients:
    name: clients
    # level: 0
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        client: [kubectl-gadget, gadgetctl]
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Setup go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
      id: go
    - name: Set container repository and determine image tag
      id: set-repo-determine-image-tag
      uses: ./.github/actions/set-container-repo-and-determine-image-tag
      with:
        registry: ${{ env.REGISTRY }}
        container-image: ${{ env.CONTAINER_REPO }}
    - name: Build ${{ matrix.client }}-${{ matrix.os }}-${{ matrix.arch }}
      env:
        CONTAINER_REPO: ${{ steps.set-repo-determine-image-tag.outputs.container-repo }}
        IMAGE_TAG: ${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
      run: |
        git checkout

        # Prevent releases with -dirty suffix due to forgotten entries in
        # .gitignore.
        changes="$(git status --porcelain)"
        if [ -n "$changes" ] ; then
          echo "$changes"
          exit 1
        fi

        client=${{ matrix.client }}-${{ matrix.os }}-${{ matrix.arch }}
        make "$client"

        # We need to append .exe to windows binaries...
        dot_exe=$(test ${{ matrix.os }} = 'windows' && echo '.exe' || echo '')

        # Prepare assets for release and actions artifacts
        platform='${{ matrix.os }}-${{ matrix.arch }}'
        mkdir "$platform"
        cp "${client}${dot_exe}" "${platform}/${{ matrix.client }}${dot_exe}"
        cp LICENSE "$platform/"
        tar --sort=name --owner=root:0 --group=root:0 \
          -czf "${client}.tar.gz" -C "$platform" \
          ${{ matrix.client }}${dot_exe} LICENSE
        rm -rf "$platform"
    - name: Add ${{ matrix.client }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz as artifact.
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ${{ matrix.client }}-${{ matrix.os }}-${{ matrix.arch }}-tar-gz
        path: /home/runner/work/inspektor-gadget/inspektor-gadget/${{ matrix.client }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz

  build-ig:
    name: ig
    # level: 1
    needs:
      - build-helper-images
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        platform: [amd64, arm64]
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Setup go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
      id: go
    - name: Get btfhub-archive last commmit
      id: get-btfhub-head
      run: |
        echo "head=$(git ls-remote https://github.com/aquasecurity/btfhub-archive/ HEAD | cut -f1)" >> $GITHUB_OUTPUT
      shell: bash
    - name: Build ig-linux-${{ matrix.platform }}
      env:
        GADGET_BUILDER: ${{ needs.build-helper-images.outputs.gadget_builder_image }}
      run: |
        if [ "${{ matrix.platform }}" = 'arm64' ]; then
          sudo apt-get update
          sudo apt-get install qemu-user-static
        fi

        make ig-linux-${{ matrix.platform }}

        # Prepare assets for release and actions artifacts
        mkdir ${{ matrix.platform }}
        cp ig-linux-${{ matrix.platform }} ${{ matrix.platform }}/ig
        cp LICENSE ${{ matrix.platform }}/
        tar --sort=name --owner=root:0 --group=root:0 \
          -czf ig-linux-${{ matrix.platform }}.tar.gz -C ${{ matrix.platform }} \
          ig LICENSE
        rm -rf ${{ matrix.platform }}
    - name: Add ig-linux-${{ matrix.platform }}.tar.gz as artifact.
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ig-linux-${{ matrix.platform }}-tar-gz
        path: /home/runner/work/inspektor-gadget/inspektor-gadget/ig-linux-${{ matrix.platform }}.tar.gz

  build-gadget-container-images:
    name: gadget img
    # level: 1
    runs-on: ubuntu-latest
    permissions:
      # allow publishing container image
      # in case of public fork repo/packages permissions will always be read
      contents: read
      packages: write
    outputs:
      digest-amd64: ${{ steps.published-gadget-container-images.outputs.amd64 }}
      digest-arm64: ${{ steps.published-gadget-container-images.outputs.arm64 }}
      sbom-digest-amd64: ${{ steps.gadget-container-images-attach-sbom.outputs.sbom-amd64 }}
      sbom-digest-arm64: ${{ steps.gadget-container-images-attach-sbom.outputs.sbom-arm64 }}
    strategy:
      fail-fast: false
      matrix:
        os: [ linux ]
        # For the moment, we only support these two platforms.
        platform: [ arm64, amd64 ]
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
    - name: Cache Docker layers
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ matrix.platform }}-${{ hashFiles('Dockerfiles/gadget.Dockerfile') }}
        restore-keys: |
          ${{ runner.os }}-docker-${{ matrix.platform }}-
    - name: Login to Container Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Set container repository and determine image tag
      id: set-repo-determine-image-tag
      uses: ./.github/actions/set-container-repo-and-determine-image-tag
      with:
        registry: ${{ env.REGISTRY }}
        container-image: ${{ env.CONTAINER_REPO }}
    - name: Get btfhub-archive last commmit
      id: get-btfhub-head
      run: |
        echo "head=$(git ls-remote https://github.com/aquasecurity/btfhub-archive/ HEAD | cut -f1)" >> $GITHUB_OUTPUT
      shell: bash
    # we are using cache-to mode=min (default) implying that only final image layers are cached, using cache
    # mode=max results in builder image layer of ~7GB because of btfhub files in a layer, which is too
    # large (gloabal limit 10GB) to work with GH caches. (TODO: if we can work with mode=max in future?)
    - name: Build gadget ${{ matrix.os }} ${{ matrix.platform }} container image as artifacts
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: /home/runner/work/inspektor-gadget/inspektor-gadget/
        file: /home/runner/work/inspektor-gadget/inspektor-gadget/Dockerfiles/gadget.Dockerfile
        outputs: type=docker,dest=/tmp/gadget-container-image-${{ matrix.os }}-${{ matrix.platform }}.tar
        tags: ${{ steps.set-repo-determine-image-tag.outputs.container-repo }}:${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
        platforms: ${{ matrix.os }}/${{ matrix.platform }}
        build-args: |
          VERSION=${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
    - name: Publish gadget ${{ matrix.os }} ${{ matrix.platform }} container image as artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: gadget-container-image-${{ matrix.os }}-${{ matrix.platform }}.tar
        path: /tmp/gadget-container-image-${{ matrix.os }}-${{ matrix.platform }}.tar
        retention-days: 1
    - name: Generate SBOM for gadget ${{ matrix.os }} ${{ matrix.platform }} image
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: /home/runner/work/inspektor-gadget/inspektor-gadget/
        file: /home/runner/work/inspektor-gadget/inspektor-gadget/Dockerfiles/gadget.Dockerfile
        outputs: type=local,dest=/tmp/gadget-container-image-${{ matrix.os }}-${{ matrix.platform }}
        tags: ${{ steps.set-repo-determine-image-tag.outputs.container-repo }}:${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
        platforms: ${{ matrix.os }}/${{ matrix.platform }}
        # The following permits to generate SBOM:
        # https://github.com/moby/buildkit/issues/2773#issue-1194754388
        build-args: BUILDKIT_SYNTAX=crazymax/dockerfile:sbom
    # build time will not be increased with this workflow because of internal cache
    # buildx is used here since it allows push-by-digest to avoid platform specific tags
    - name: Publish gadget ${{ matrix.os }} ${{ matrix.platform }} container image to registry
      id: publish-gadget-container-images
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: /home/runner/work/inspektor-gadget/inspektor-gadget/
        file: /home/runner/work/inspektor-gadget/inspektor-gadget/Dockerfiles/gadget.Dockerfile
        outputs: type=registry,name=${{ steps.set-repo-determine-image-tag.outputs.container-repo }},push=true,push-by-digest=true
        cache-from: type=local,src=/tmp/.buildx-cache-new
        platforms: ${{ matrix.os }}/${{ matrix.platform }}
        build-args: |
          VERSION=${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
    - name: Setup oras
      if: github.event_name != 'pull_request'
      uses: oras-project/setup-oras@8d34698a59f5ffe24821f0b48ab62a3de8b64b20 # v1.2.3
    - name: Attach SBOM to container image
      if: github.event_name != 'pull_request'
      id: gadget-container-images-attach-sbom
      env:
        CONTAINER_REPO: ${{ steps.set-repo-determine-image-tag.outputs.container-repo }}
        DIGEST: ${{ steps.publish-gadget-container-images.outputs.digest }}
      run: |
        # We need to get the image digest from the manifest.
        # Otherwise, we will attach the SBOM to the manifest and the SBOM will
        # be lost when using imagetools as this command creates a new manifest
        # and attaches only the images, not the existing manifests.
        # This way, we are sure the new manifest will point to the images which
        # have SBOM attached.
        manifest=$(oras manifest fetch "${CONTAINER_REPO}@${DIGEST}")
        image_digest=$(echo "$manifest" | jq -e '[.manifests[] | select ( .platform.architecture == "${{ matrix.platform }}" and .platform.os == "${{ matrix.os }}" )] | if length != 1 then empty else .[0].digest end')
        image_digest=$(echo "$image_digest" | tr -d '"')

        sbom_digest=$(oras attach "${CONTAINER_REPO}@${image_digest}" /tmp/gadget-container-image-${{ matrix.os }}-${{ matrix.platform }}/sbom_cyclonedx.json --disable-path-validation --artifact-type example/sbom | grep 'Digest:' | awk '{ print $2 }')

        echo "sbom-${{ matrix.platform }}=${sbom_digest}" >> $GITHUB_OUTPUT
    - name: Save gadget ${{ matrix.os }} ${{ matrix.platform }} container image digest output
      id: published-gadget-container-images
      if: github.event_name != 'pull_request'
      env:
        DIGEST: ${{ steps.publish-gadget-container-images.outputs.digest }}
      run: |
          echo "${{ matrix.platform }}=$DIGEST" >> $GITHUB_OUTPUT
    # old cache entries aren’t deleted, so the cache size keeps growing
    # remove old cache and move new cache to cache path to workaround the issue
    # https://github.com/docker/build-push-action/issues/252
    - name: Move gadget ${{ matrix.os }} ${{ matrix.platform }} container image cache to correct location
      run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  build-ig-container-images:
    name: ig img
    # level: 1
    needs:
      - build-helper-images
    runs-on: ubuntu-latest
    permissions:
      # allow publishing container image
      # in case of public fork repo/packages permissions will always be read
      contents: read
      packages: write
    outputs:
      digest-amd64: ${{ steps.published-ig-container-images.outputs.amd64 }}
      digest-arm64: ${{ steps.published-ig-container-images.outputs.arm64 }}
      sbom-digest-amd64: ${{ steps.ig-container-images-attach-sbom.outputs.sbom-amd64 }}
      sbom-digest-arm64: ${{ steps.ig-container-images-attach-sbom.outputs.sbom-arm64 }}
    strategy:
      fail-fast: false
      matrix:
        os: [ linux ]
        # For the moment, we only support these two platforms.
        platform: [ arm64, amd64 ]
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
    - name: Cache Docker layers
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ matrix.platform }}-${{ hashFiles('Dockerfiles/ig.Dockerfile') }}
        restore-keys: |
          ${{ runner.os }}-docker-${{ matrix.platform }}-
    - name: Login to Container Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Set container repository and determine image tag
      id: set-repo-determine-image-tag
      uses: ./.github/actions/set-container-repo-and-determine-image-tag
      with:
        registry: ${{ env.REGISTRY }}
        container-image: ${{ github.repository_owner }}/ig
    - name: Get btfhub-archive last commmit
      id: get-btfhub-head
      run: |
        echo "head=$(git ls-remote https://github.com/aquasecurity/btfhub-archive/ HEAD | cut -f1)" >> $GITHUB_OUTPUT
      shell: bash
    - name: Build ig ${{ matrix.os }} ${{ matrix.platform }} container image as artifacts
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: /home/runner/work/inspektor-gadget/inspektor-gadget/
        file: /home/runner/work/inspektor-gadget/inspektor-gadget/Dockerfiles/ig.Dockerfile
        outputs: type=docker,dest=/tmp/ig-container-image-${{ matrix.os }}-${{ matrix.platform }}.tar
        tags: ${{ steps.set-repo-determine-image-tag.outputs.container-repo }}:${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
        platforms: ${{ matrix.os }}/${{ matrix.platform }}
        build-args: |
          VERSION=${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
          GADGET_BUILDER=${{ needs.build-helper-images.outputs.gadget_builder_image }}
    - name: Publish ig ${{ matrix.os }} ${{ matrix.platform }} container image as artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ig-container-image-${{ matrix.os }}-${{ matrix.platform }}.tar
        path: /tmp/ig-container-image-${{ matrix.os }}-${{ matrix.platform }}.tar
        retention-days: 1
    - name: Generate ig ${{ matrix.os }} ${{ matrix.platform }} container image SBOM
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: /home/runner/work/inspektor-gadget/inspektor-gadget/
        file: /home/runner/work/inspektor-gadget/inspektor-gadget/Dockerfiles/ig.Dockerfile
        outputs: type=local,dest=/tmp/ig-container-image-${{ matrix.os }}-${{ matrix.platform }}
        tags: ${{ steps.set-repo-determine-image-tag.outputs.container-repo }}:${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
        platforms: ${{ matrix.os }}/${{ matrix.platform }}
        build-args: |
          VERSION=${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
          GADGET_BUILDER=${{ needs.build-helper-images.outputs.gadget_builder_image }}
          BUILDKIT_SYNTAX=crazymax/dockerfile:sbom
    # build time will not be increased with this workflow because of internal cache
    # buildx is used here since it allows push-by-digest to avoid platform specific tags
    - name: Publish ig ${{ matrix.os }} ${{ matrix.platform }} container image to registry
      id: publish-ig-container-images
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: /home/runner/work/inspektor-gadget/inspektor-gadget/
        file: /home/runner/work/inspektor-gadget/inspektor-gadget/Dockerfiles/ig.Dockerfile
        outputs: type=registry,name=${{ steps.set-repo-determine-image-tag.outputs.container-repo }},push=true,push-by-digest=true
        cache-from: type=local,src=/tmp/.buildx-cache-new
        platforms: ${{ matrix.os }}/${{ matrix.platform }}
        build-args: |
          VERSION=${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
          GADGET_BUILDER=${{ needs.build-helper-images.outputs.gadget_builder_image }}
    - name: Setup oras
      if: github.event_name != 'pull_request'
      uses: oras-project/setup-oras@8d34698a59f5ffe24821f0b48ab62a3de8b64b20 # v1.2.3
    - name: Attach SBOM to container image
      if: github.event_name != 'pull_request'
      id: ig-container-images-attach-sbom
      env:
        CONTAINER_REPO: ${{ steps.set-repo-determine-image-tag.outputs.container-repo }}
        DIGEST: ${{ steps.publish-ig-container-images.outputs.digest }}
      run: |
        # We need to get the image digest from the manifest.
        # Otherwise, we will attach the SBOM to the manifest and the SBOM will
        # be lost when using imagetools as this command creates a new manifest
        # and attaches only the images, not the existing manifests.
        # This way, we are sure the new manifest will point to the images which
        # have SBOM attached.
        manifest=$(oras manifest fetch "${CONTAINER_REPO}@${DIGEST}")
        image_digest=$(echo $manifest | jq -e '[.manifests[] | select ( .platform.architecture == "${{ matrix.platform }}" and .platform.os == "${{ matrix.os }}" )] | if length != 1 then empty else .[0].digest end')
        image_digest=$(echo "$image_digest" | tr -d '"')

        sbom_digest=$(oras attach "${CONTAINER_REPO}@${image_digest}" /tmp/ig-container-image-${{ matrix.os }}-${{ matrix.platform }}/sbom_cyclonedx.json --disable-path-validation --artifact-type example/sbom | grep 'Digest:' | awk '{ print $2 }')

        echo "sbom-${{ matrix.platform }}=${sbom_digest}" >> $GITHUB_OUTPUT
    - name: Save ig ${{ matrix.os }} ${{ matrix.platform }} container image digest output
      id: published-ig-container-images
      if: github.event_name != 'pull_request'
      env:
        DIGEST: ${{ steps.publish-ig-container-images.outputs.digest }}
      run: |
          echo "${{ matrix.platform }}=$DIGEST" >> $GITHUB_OUTPUT
    # old cache entries aren’t deleted, so the cache size keeps growing
    # remove old cache and move new cache to cache path to workaround the issue
    # https://github.com/docker/build-push-action/issues/252
    - name: Move ig ${{ matrix.os }} ${{ matrix.platform }} container image cache to correct location
      run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  analyse-ig-binary-size:
    name: IG binary size analysis
    runs-on: ubuntu-latest
    needs:
      - build-ig
    strategy:
      matrix:
        platform: [amd64, arm64]
    steps:
      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
        id: go
      - name: Install go-size-analyzer
        run: |
          go install github.com/Zxilly/go-size-analyzer/cmd/gsa@e47aa2561e70b937f2be7441b2eeca984ff60e8b # v1.7.6
      - name: Get ig-linux-${{matrix.platform}}.tar.gz from artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ig-linux-${{matrix.platform}}-tar-gz
          path: /home/runner/work/inspektor-gadget/
      - name: Unpack ig-linux-${{matrix.platform}}.tar.gz
        run: |
          tar zxvf /home/runner/work/inspektor-gadget/ig-linux-${{matrix.platform}}.tar.gz
          gsa ./ig -f "json" --compact | tee out.json
          jq '[.packages | to_entries[] | {package: .key, size: .value.size, type: .value.type}] | sort_by(.size) | reverse' out.json | tee ig-packages.json
        shell: bash
      - name: Generate Markdown Table
        uses: buildingcash/json-to-markdown-table-action@b442169239ef35f1dc4e5c8c3d47686c081a7e65  #v1.1.0
        id: table
        with:
          json_file_path: ig-packages.json
      - name: Add Markdown Table
        env:
          TABLE_OUTPUT: ${{ steps.table.outputs.table }}
        run: |
          echo '### Package Size Summary' >> $GITHUB_STEP_SUMMARY
          echo "$TABLE_OUTPUT" >> $GITHUB_STEP_SUMMARY

  publish-gadget-images-manifest:
    name: Publish gadget img manifest
    # level: 2
    if: github.event_name != 'pull_request'
    needs:
      - build-gadget-container-images
      - check-secrets
    runs-on: ubuntu-latest
    permissions:
      # allow publishing container image
      # in case of public fork repo/packages permissions will always be read
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.publish-manifest-list.outputs.image-digest }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: Login to Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set container repository and determine image tag
        id: set-repo-determine-image-tag
        uses: ./.github/actions/set-container-repo-and-determine-image-tag
        with:
          registry: ${{ env.REGISTRY }}
          container-image: ${{ env.CONTAINER_REPO }}
      - name: Publish the manifest list
        id: publish-manifest-list
        env:
          CONTAINER_REPO: ${{ steps.set-repo-determine-image-tag.outputs.container-repo }}
          IMAGE_TAG: ${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
          DIGEST_AMD64: ${{ needs.build-gadget-container-images.outputs.digest-amd64 }}
          DIGEST_ARM64: ${{ needs.build-gadget-container-images.outputs.digest-arm64 }}
          SBOM_DIGEST_AMD64: ${{ needs.build-gadget-container-images.outputs.sbom-digest-amd64 }}
          SBOM_DIGEST_ARM64: ${{ needs.build-gadget-container-images.outputs.sbom-digest-arm64 }}
        run: |
          IMAGE_REF="${CONTAINER_REPO}:${IMAGE_TAG}"
          IMAGE_SOURCE="https://github.com/inspektor-gadget/inspektor-gadget"
          IMAGE_DOCUMENTATION="https://inspektor-gadget.io/docs"
          IMAGE_LICENSES="Apache-2.0"
          IMAGE_TITLE="Inspektor Gadget k8s DaemonSet"
          IMAGE_DESCRIPTION="Inspektor Gadget is a collection of tools (or gadgets) to debug and inspect Kubernetes resources and applications. This image is used as a long-running DaemonSet in Kubernetes via the kubectl-gadget deploy command or via the Helm charts."

          docker buildx imagetools create \
              -t "$IMAGE_REF" \
              --annotation index:org.opencontainers.image.documentation="$IMAGE_DOCUMENTATION" \
              --annotation index:org.opencontainers.image.description="$IMAGE_DESCRIPTION" \
              --annotation index:org.opencontainers.image.licenses="$IMAGE_LICENSES" \
              --annotation index:org.opencontainers.image.source="$IMAGE_SOURCE" \
              --annotation index:org.opencontainers.image.title="$IMAGE_TITLE" \
              "${CONTAINER_REPO}@${DIGEST_AMD64}" \
              "${CONTAINER_REPO}@${SBOM_DIGEST_AMD64}" \
              "${CONTAINER_REPO}@${DIGEST_ARM64}" \
              "${CONTAINER_REPO}@${SBOM_DIGEST_ARM64}"

          image_digest=$(docker buildx imagetools inspect --format '{{json .Manifest.Digest}}' $IMAGE_REF | jq -r)
          echo "image-digest=${image_digest}" >> $GITHUB_OUTPUT
      - name: Sign the manifest list
        if: needs.check-secrets.outputs.cosign == 'true'
        uses: ./.github/actions/sign-container-image
        with:
          password: '${{ secrets.COSIGN_PASSWORD }}'
          private_key: '${{ secrets.COSIGN_PRIVATE_KEY }}'
          image: "${{ steps.set-repo-determine-image-tag.outputs.container-repo }}@${{ steps.publish-manifest-list.outputs.image-digest }}"

  publish-ig-images-manifest:
    name: Publish ig img manifest
    # level: 2
    if: github.event_name != 'pull_request'
    needs:
      - build-ig-container-images
      - check-secrets
    runs-on: ubuntu-latest
    permissions:
      # allow publishing container image
      # in case of public fork repo/packages permissions will always be read
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: Login to Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set container repository and determine image tag
        id: set-repo-determine-image-tag
        uses: ./.github/actions/set-container-repo-and-determine-image-tag
        with:
          registry: ${{ env.REGISTRY }}
          container-image: ${{ github.repository_owner }}/ig
      - name: Publish the manifest list
        id: publish-manifest-list
        env:
          CONTAINER_REPO: ${{ steps.set-repo-determine-image-tag.outputs.container-repo }}
          IMAGE_TAG: ${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
          DIGEST_AMD64: ${{ needs.build-ig-container-images.outputs.digest-amd64 }}
          DIGEST_ARM64: ${{ needs.build-ig-container-images.outputs.digest-arm64 }}
          SBOM_DIGEST_AMD64: ${{ needs.build-ig-container-images.outputs.sbom-digest-amd64 }}
          SBOM_DIGEST_ARM64: ${{ needs.build-ig-container-images.outputs.sbom-digest-arm64 }}
        run: |
          IMAGE_REF="${CONTAINER_REPO}:${IMAGE_TAG}"
          IMAGE_SOURCE="https://github.com/inspektor-gadget/inspektor-gadget"
          IMAGE_DOCUMENTATION="https://inspektor-gadget.io/docs"
          IMAGE_LICENSES="Apache-2.0"
          IMAGE_TITLE="Inspektor Gadget ig tool"
          IMAGE_DESCRIPTION="Inspektor Gadget is a collection of tools (or gadgets) to debug and inspect Kubernetes resources and applications. This image only includes the ig binary, a standalone tool to run the gadgets."

          docker buildx imagetools create \
            -t "$IMAGE_REF" \
              "${CONTAINER_REPO}@${DIGEST_AMD64}" \
              "${CONTAINER_REPO}@${SBOM_DIGEST_AMD64}" \
              "${CONTAINER_REPO}@${DIGEST_ARM64}" \
              "${CONTAINER_REPO}@${SBOM_DIGEST_ARM64}" \
            --annotation index:org.opencontainers.image.documentation="$IMAGE_DOCUMENTATION" \
            --annotation index:org.opencontainers.image.description="$IMAGE_DESCRIPTION" \
            --annotation index:org.opencontainers.image.licenses="$IMAGE_LICENSES" \
            --annotation index:org.opencontainers.image.source="$IMAGE_SOURCE" \
            --annotation index:org.opencontainers.image.title="$IMAGE_TITLE"

          image_digest=$(docker buildx imagetools inspect --format '{{json .Manifest.Digest}}' "$IMAGE_REF" | jq -r)
          echo "image-digest=${image_digest}" >> $GITHUB_OUTPUT
      - name: Sign the manifest list
        if: needs.check-secrets.outputs.cosign == 'true'
        uses: ./.github/actions/sign-container-image
        with:
          password: '${{ secrets.COSIGN_PASSWORD }}'
          private_key: '${{ secrets.COSIGN_PRIVATE_KEY }}'
          image: "${{ steps.set-repo-determine-image-tag.outputs.container-repo }}@${{ steps.publish-manifest-list.outputs.image-digest }}"

  build-helper-images:
    # level: 2
    name: helper images
    runs-on: ubuntu-latest
    needs:
      - check-secrets
    outputs:
      dnstester_image: ${{ steps.image-tag.outputs.dnstester }}
      gadget_builder_image: ${{ steps.image-tag.outputs.gadget-builder }}
    permissions:
      # allow publishing container image
      # in case of public fork repo/packages permissions will always be read
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        image:
          - name: "dnstester"
            context: "tools/dnstester"
            dockerfile: "tools/dnstester/Dockerfile"
            platform: "linux/amd64,linux/arm64"
            key-files: "tools/dnstester/*"
          - name: "gadget-builder"
            context: "/home/runner/work/inspektor-gadget/inspektor-gadget"
            dockerfile: "Dockerfiles/gadget-builder.Dockerfile"
            platform: "linux/amd64,linux/arm64"
            key-files: |
              include/**
              Dockerfiles/gadget-builder.Dockerfile
              cmd/common/image/Makefile.build
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
    - name: Cache Docker layers
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ matrix.image.name }}-${{ hashFiles(matrix.image.key-files) }}
        restore-keys: |
          ${{ runner.os }}-docker-${{ matrix.image.name}}-
    - name: Login to Container Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Set container repository and determine image tag
      id: set-repo-determine-image-tag
      uses: ./.github/actions/set-container-repo-and-determine-image-tag
      with:
        registry: ${{ env.REGISTRY }}
        container-image: ${{ github.repository_owner }}/${{ matrix.image.name }}
    - name: Build ${{ matrix.image.name }} image
      id: build-image
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: ${{ matrix.image.context }}
        file: ${{ matrix.image.dockerfile }}
        # The repository should have the variable PUSH_HELPERS set to
        # ENABLE_PUSH_HELPERS, see:
        # https://docs.github.com/en/actions/learn-github-actions/variables#creating-configuration-variables-for-a-repository
        push: ${{ vars.PUSH_HELPERS == 'ENABLE_PUSH_HELPERS' }}
        tags: ${{ steps.set-repo-determine-image-tag.outputs.container-repo }}:${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
        platforms: ${{ matrix.image.platform }}
    - name: Save ${{ matrix.image.name }} image tag output
      id: image-tag
      env:
        CONTAINER_REPO: ${{ steps.set-repo-determine-image-tag.outputs.container-repo }}
        DIGEST: ${{ steps.build-image.outputs.digest }}
      run: |
        if [ -n "$DIGEST" ]; then
          image="${CONTAINER_REPO}@${DIGEST}"
        else
          if [ ${{ matrix.image.name }} == "dnstester" ]; then
            image=${{ env.DEFAULT_DNSTESTER_IMAGE }}
          elif [ ${{ matrix.image.name }} == "gadget-builder" ]; then
            image=${{ env.DEFAULT_GADGET_BUILDER_IMAGE }}
          else
            >&2 echo "No default image for ${{ matrix.image.name }}!"
            exit 1
          fi
        fi

        echo "${{ matrix.image.name }}=${image}" >> $GITHUB_OUTPUT
    - name: Sign ${{ matrix.image.name }} image
      if:  needs.check-secrets.outputs.cosign == 'true' && vars.PUSH_HELPERS == 'ENABLE_PUSH_HELPERS'
      uses: ./.github/actions/sign-container-image
      with:
        password: '${{ secrets.COSIGN_PASSWORD }}'
        private_key: '${{ secrets.COSIGN_PRIVATE_KEY }}'
        image: "${{ steps.set-repo-determine-image-tag.outputs.container-repo }}@${{ steps.build-image.outputs.digest }}"
    # old cache entries aren’t deleted, so the cache size keeps growing
    # remove old cache and move new cache to cache path to workaround the issue
    # https://github.com/docker/build-push-action/issues/252
    - name: Move ig container image cache to correct location
      run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
  package-helm-charts:
    name: Lint and package Helm charts
    # level: 0
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Set container repository and determine image tag
      id: set-repo-determine-image-tag
      uses: ./.github/actions/set-container-repo-and-determine-image-tag
      with:
        registry: ${{ env.REGISTRY }}
        container-image: ${{ env.CONTAINER_REPO }}
    - name: Install Helm
      uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    # chart version needs to be semver compliant so we remove the leading 'v'
    - name: Set Chart Version for release
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        TAG: ${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
      run: |
        echo "CHART_VERSION=${TAG#v}" >> $GITHUB_ENV
    - name: Lint Helm charts
      env:
        IMAGE_TAG: ${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
      run: |
        make -C charts lint
    - name: Detect changes for deploy.yaml
      run: |
        make generate-manifests
        changes="$(git status --porcelain)"
        if [ -n "$changes" ] ; then
          echo "$changes"
          exit 1
        fi
    - name: Package Helm charts
      env:
        IMAGE_TAG: ${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
      run: |
        make -C charts package
    - name: Upload Helm charts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: gadget-charts-tgz
        path: charts/bin/*.tgz

  publish-helm-charts:
    name: Publish Helm charts
    # level: 1
    if: github.event_name != 'pull_request'
    needs: package-helm-charts
    runs-on: ubuntu-latest
    permissions:
      # allow publishing helm charts
      # in case of public fork repo/packages permissions will always be read
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Login to Container Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Install Helm
      uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Download Helm charts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: gadget-charts-tgz
    - name: Publish Helm charts
      run: |
        # Final name of the chart will be REGISTRY/CONTAINER_REPO/charts/CHART_NAME:CHART_VERSION
        # where CHART_NAME and CHART_VERSION are derived from the Chart.yaml packaged in the tgz
        helm push gadget-*.tgz \
          oci://${{ env.REGISTRY }}/${{ env.CONTAINER_REPO }}/charts


  check-secrets:
    name: Check repo secrets
    # level: 0
    runs-on: ubuntu-latest
    outputs:
      aro: ${{ steps.set_output.outputs.aro }}
      aks: ${{ steps.set_output.outputs.aks }}
      gke: ${{ steps.set_output.outputs.gke }}
      cosign: ${{ steps.set_output.outputs.cosign }}
    steps:
      # Secrets cannot be used as if condition, use job output as workaround.
      # https://github.com/actions/runner/issues/520
      - id: set_output
        env:
          OPENSHIFT_SERVER: '${{ secrets.OPENSHIFT_SERVER }}'
          OPENSHIFT_USER: '${{ secrets.OPENSHIFT_USER }}'
          OPENSHIFT_PASSWORD: '${{ secrets.OPENSHIFT_PASSWORD }}'
          AZURE_AKS_CLIENT_ID: '${{ secrets.AZURE_AKS_CLIENT_ID }}'
          AZURE_AKS_TENANT_ID: '${{ secrets.AZURE_AKS_TENANT_ID }}'
          AZURE_AKS_SUBSCRIPTION_ID: '${{ secrets.AZURE_AKS_SUBSCRIPTION_ID }}'
          AZURE_AKS_RESOURCE_GROUP: '${{ secrets.AZURE_AKS_RESOURCE_GROUP }}'
          COSIGN_PASSWORD: '${{ secrets.COSIGN_PASSWORD }}'
          COSIGN_PRIVATE_KEY: '${{ secrets.COSIGN_PRIVATE_KEY }}'
          GKE_PROJECT: '${{ secrets.GKE_PROJECT }}'
          GKE_SERVICE_ACCOUNT: '${{ secrets.GKE_SERVICE_ACCOUNT }}'
          GKE_WORKLOAD_IDENTITY_PROVIDER: '${{ secrets.GKE_WORKLOAD_IDENTITY_PROVIDER }}'
        run: |
          if [[ "${OPENSHIFT_SERVER}" != "" && \
                "${OPENSHIFT_USER}" != "" && \
                "${OPENSHIFT_PASSWORD}" != "" ]]; \
          then
            echo "Secrets to use an ARO cluster were configured in the repo"
            echo "aro=true" >> $GITHUB_OUTPUT
          else
            echo "Secrets to use an ARO cluster were not configured in the repo"
            echo "aro=false" >> $GITHUB_OUTPUT
          fi

          if [[ "${AZURE_AKS_CLIENT_ID}" != "" && \
                "${AZURE_AKS_TENANT_ID}" != "" && \
                "${AZURE_AKS_SUBSCRIPTION_ID}" != "" && \
                "${AZURE_AKS_RESOURCE_GROUP}" != "" ]]; \
          then
            echo "Secrets to use an AKS cluster were configured in the repo"
            echo "aks=true" >> $GITHUB_OUTPUT
          else
            echo "Secrets to use an AKS cluster were not configured in the repo"
            echo "aks=false" >> $GITHUB_OUTPUT
          fi

          if [[ "${COSIGN_PASSWORD}" != "" && \
                "${COSIGN_PRIVATE_KEY}" != "" ]]; \
          then
            echo "Secrets to use cosign were configured in the repo"
            echo "cosign=true" >> $GITHUB_OUTPUT
          else
            echo "Secrets to use cosign were not configured in the repo"
            echo "cosign=false" >> $GITHUB_OUTPUT
          fi

          if [[ "${GKE_PROJECT}" != "" && \
                "${GKE_SERVICE_ACCOUNT}" != "" && \
                "${GKE_WORKLOAD_IDENTITY_PROVIDER}" != "" ]]; \
          then
            echo "Secrets to use a GKE cluster were configured in the repo"
            echo "gke=true" >> $GITHUB_OUTPUT
          else
            echo "Secrets to use a GKE cluster were not configured in the repo"
            echo "gke=false" >> $GITHUB_OUTPUT
          fi

  public-key-check:
    name: Public key check
    # level: 1
    needs: check-secrets
    runs-on: ubuntu-latest
    # The first check means that job will only run if the secrets are present. So it will be skipped
    # for forks, PRs from forks and dependabot PRs (if no dependabot secret are configured).
    # The second check ensures if we forgot configuring the secrets in main repo
    # (inspektor-gadget/inspektor-gadget) so we can catch it early.
    if: needs.check-secrets.outputs.cosign == 'true' || (github.event_name == 'push' && github.repository == 'inspektor-gadget/inspektor-gadget')
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Install Cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2
      - name: Check if public key is up-to-date.
        env:
          COSIGN_PASSWORD: '${{ secrets.COSIGN_PASSWORD }}'
          COSIGN_PRIVATE_KEY: '${{ secrets.COSIGN_PRIVATE_KEY }}'
        run: |
          cosign public-key --key env://COSIGN_PRIVATE_KEY > pkg/resources/inspektor-gadget.pub
          changes="$(git status --porcelain)"
          if [ -n "$changes" ] ; then
            >&2 echo "$changes"
            exit 1
          fi

  build-and-push-gadgets:
    name: Build and push gadgets
    # level: 2
    needs:
      - build-ig
      - build-helper-images
      - check-secrets
    runs-on: ubuntu-latest
    permissions:
      # allow publishing container image
      # in case of public fork repo/packages permissions will always be read
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Login to Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set container repository and determine image tag
        id: set-repo-determine-image-tag
        uses: ./.github/actions/set-container-repo-and-determine-image-tag
        with:
          registry: ${{ env.REGISTRY }}
          container-image: ${{ env.CONTAINER_REPO }}
      - name: Get ig-linux-amd64.tar.gz from artifact.
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ig-linux-amd64-tar-gz
          path: /home/runner/work/inspektor-gadget/
      - name: Unpack ig-linux-amd64.tar.gz
        run: |
          tar zxvf /home/runner/work/inspektor-gadget/ig-linux-amd64.tar.gz
          sudo mv ig /usr/bin/ig
      - name: Install Cosign
        if: needs.check-secrets.outputs.cosign == 'true'
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2
      - name: Verify gadget builder image
        if: needs.check-secrets.outputs.cosign == 'true'
        run: |
          cosign verify --key pkg/resources/inspektor-gadget.pub ${{ needs.build-helper-images.outputs.gadget_builder_image }}
      - name: Build gadgets
        env:
          BUILDER_IMAGE: ${{ needs.build-helper-images.outputs.gadget_builder_image }}
          GADGET_REPOSITORY: ${{ steps.set-repo-determine-image-tag.outputs.gadget-repository }}
          GADGET_TAG: ${{ steps.set-repo-determine-image-tag.outputs.gadget-tag }}
          CFLAGS: "-Werror"
        run: |
          make build-gadgets -o install/ig -j$(nproc)

          # Check that metadata files are updated
          git diff --exit-code HEAD --

          # Avoid building the gadgets again
          make -C gadgets/ push-existing -j$(nproc)
      - name: Sign the gadgets
        if: needs.check-secrets.outputs.cosign == 'true'
        env:
          COSIGN_PASSWORD: '${{ secrets.COSIGN_PASSWORD }}'
          COSIGN_PRIVATE_KEY: '${{ secrets.COSIGN_PRIVATE_KEY }}'
          GADGET_REPOSITORY: ${{ steps.set-repo-determine-image-tag.outputs.gadget-repository }}
          GADGET_TAG: ${{ steps.set-repo-determine-image-tag.outputs.gadget-tag }}
        run: |
          make -C gadgets/ sign-existing -j$(nproc)
  release:
    name: Release
    # level: 5
    needs:
      - build-and-push-gadgets
      - package-helm-charts
      - check-secrets
      - publish-gadget-images-manifest
      - public-key-check
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - id: set-repo-determine-image-tag
      uses: ./.github/actions/set-container-repo-and-determine-image-tag
      with:
        registry: ${{ env.REGISTRY }}
        container-image: ${{ env.CONTAINER_REPO }}
    - name: Build release YAML
      env:
        IMAGE_TAG: ${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
      run: |
        export IMAGE="${{ env.REGISTRY }}/${{ env.CONTAINER_REPO }}:${IMAGE_TAG}"
        cp pkg/resources/manifests/deploy.yaml "inspektor-gadget-${GITHUB_REF_NAME}.yaml"
        perl -pi -e 's@(image:) ".+\"@$1 "$ENV{IMAGE}"@; s@"latest"@"$ENV{IMAGE_TAG}"@;' "inspektor-gadget-${GITHUB_REF_NAME}.yaml"
    - name: Create Draft Release
      id: create_release
      uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        name: Release ${{ github.ref_name }}
        draft: true
    - name: Get all artifacts.
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
    - name: Setup go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
      id: go
    - name: Build ig distributions packages
      run: |
        go install github.com/goreleaser/nfpm/v2/cmd/nfpm@d33a9233bb7acf04621b78114114476196d7977 # v2.38.0

        mkdir ig_packages
        for ig_archive in ig-*-*-tar-gz/ig-*-*.tar.gz; do
          cp .nfpm_template.yaml nfpm.yaml

          mkdir archive_output
          tar zxvf "$ig_archive" -C archive_output
          export path=$(find archive_output -name 'ig')

          # Fill the template file with corresponding information.
          export arch=$(echo "$ig_archive" | cut -d'-' -f3)
          perl -pi -e 's/IG_ARCH/$ENV{arch}/; s/IG_VERSION/$ENV{GITHUB_REF_NAME}/; s/IG_PATH/$ENV{path}/' nfpm.yaml

          # Build the packages
          for distro in apk deb rpm archlinux; do
            nfpm package -p "$distro" -t ig_packages
          done

          rm -r archive_output
          rm nfpm.yaml
        done
    - name : Generate go mod vendor archive
      shell: bash
      run: |
        go mod vendor
        tar --create --remove-files --auto-compress --file inspektor-gadget-vendor.tar.gz --transform="s:^:inspektor-gadget-${GITHUB_REF_NAME#v}/:" vendor
    - name: Rename all artifacts to *-${{ github.ref_name }}.tar.gz
      shell: bash
      run: |
        for i in kubectl-gadget-*-*-tar-gz/kubectl-gadget-*-*.tar.gz ig-*-*-tar-gz/ig-*-*.tar.gz gadgetctl-*-*-tar-gz/gadgetctl-*-*.tar.gz inspektor-gadget-vendor.tar.gz; do
          mv $i $(dirname $i)/$(basename $i .tar.gz)-$GITHUB_REF_NAME.tar.gz
        done
    - name: Install cyclonedx-gomod
      uses: CycloneDX/gh-gomod-generate-sbom@efc74245d6802c8cefd925620515442756c70d8f # v2.0.0
    - name: Compute SBOM for all binary artifacts
      shell: bash
      run: |
        mkdir sbom

        for i in kubectl-gadget-*-*-tar-gz/kubectl-gadget-*-*.tar.gz ig-*-*-tar-gz/ig-*-*.tar.gz gadgetctl-*-*-tar-gz/gadgetctl-*-*.tar.gz; do
          temp_dir=$(mktemp -d)
          tar zxvf $i -C $temp_dir

          exe=$(find "$temp_dir" -type f -executable)

          cyclonedx-gomod bin -json -output sbom/$(basename $i .tar.gz).bom.json -version "$GITHUB_REF_NAME" $exe

          rm -fr "$temp_dir"
        done
    - name: Compute checksums for all artifacts
      shell: bash
      run: |
        for i in kubectl-gadget-*-*-tar-gz/kubectl-gadget-*-*.tar.gz ig-*-*-tar-gz/ig-*-*.tar.gz gadgetctl-*-*-tar-gz/gadgetctl-*-*.tar.gz inspektor-gadget-$GITHUB_REF_NAME.yaml ig_packages/* sbom/*.bom.json inspektor-gadget-vendor-*.tar.gz; do
          hash=$(sha256sum $i | cut -d' ' -f1)
          echo "${hash}  $(basename $i)" >> SHA256SUMS
        done
    - name: Install Cosign
      if: needs.check-secrets.outputs.cosign == 'true'
      uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2
    - name: Sign checksums file
      if: needs.check-secrets.outputs.cosign == 'true'
      shell: bash
      env:
        COSIGN_PASSWORD: '${{ secrets.COSIGN_PASSWORD }}'
        COSIGN_PRIVATE_KEY: '${{ secrets.COSIGN_PRIVATE_KEY }}'
      run: |
        checksums_file=SHA256SUMS

        cosign sign-blob --key env://COSIGN_PRIVATE_KEY --yes $checksums_file --output-signature="${checksums_file}.sig" --bundle="${checksums_file}.bundle"

        # Derivate public key from private key to publish it as release
        # artifact, so people can verify our signature.
        cosign public-key --key env://COSIGN_PRIVATE_KEY > inspektor-gadget.pub
    - name: Login to Container Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Upload kubectl-gadget binary
      uses: csexton/release-asset-action@3567794e918fa3068116688122a76cdeb57b5f09 # v3
      with:
        pattern: "kubectl-gadget-*-*-tar-gz/kubectl-gadget-*-*.tar.gz"
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}
    - name: Upload IG *.tar.gz binary
      uses: csexton/release-asset-action@3567794e918fa3068116688122a76cdeb57b5f09 # v3
      with:
        pattern: "ig-*-*-tar-gz/ig-*-*.tar.gz"
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}
    - name: Upload gadgetctl *.tar.gz binary
      uses: csexton/release-asset-action@3567794e918fa3068116688122a76cdeb57b5f09 # v3
      with:
        pattern: "gadgetctl-*-*-tar-gz/gadgetctl-*-*.tar.gz"
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}
    - name: Upload YAML
      uses: csexton/release-asset-action@3567794e918fa3068116688122a76cdeb57b5f09 # v3
      with:
        file: inspektor-gadget-${{ github.ref_name }}.yaml
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}
    - name: Upload checksums file
      uses: csexton/release-asset-action@3567794e918fa3068116688122a76cdeb57b5f09 # v3
      with:
        file: SHA256SUMS
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}
    - name: Upload IG distributions packages
      uses: csexton/release-asset-action@3567794e918fa3068116688122a76cdeb57b5f09 # v3
      with:
        pattern: "ig_packages/ig*"
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}
    - name: Upload Inpektor Gadget Helm Charts
      uses: csexton/release-asset-action@3567794e918fa3068116688122a76cdeb57b5f09 # v3
      with:
        pattern: "gadget-charts-tgz/gadget-*.tgz"
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}
    - name: Upload public key
      uses: csexton/release-asset-action@3567794e918fa3068116688122a76cdeb57b5f09 # v3
      with:
        pattern: "*.pub"
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}
    - name: Upload bundle
      uses: csexton/release-asset-action@3567794e918fa3068116688122a76cdeb57b5f09 # v3
      with:
        pattern: "*.bundle"
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}
    - name: Upload signature
      uses: csexton/release-asset-action@3567794e918fa3068116688122a76cdeb57b5f09 # v3
      with:
        pattern: "*.sig"
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}
    - name: Upload binaries SBOMs
      uses: csexton/release-asset-action@3567794e918fa3068116688122a76cdeb57b5f09 # v3
      with:
        pattern: "sbom/*.bom.json"
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}
    - name: Upload go mod vendor archive
      uses: csexton/release-asset-action@3567794e918fa3068116688122a76cdeb57b5f09 # v3
      with:
        pattern: "inspektor-gadget-vendor-*.tar.gz"
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}
