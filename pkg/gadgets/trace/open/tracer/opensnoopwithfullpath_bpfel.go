// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type opensnoopWithFullPathEvent struct {
	Timestamp uint64
	Pid       uint32
	Uid       uint32
	Gid       uint32
	_         [4]byte
	MntnsId   uint64
	Ret       int32
	Flags     int32
	Mode      uint16
	Comm      [16]uint8
	Fname     [255]uint8
	FullFname [4096]uint8
	_         [7]byte
}

type opensnoopWithFullPathPrefixKey struct {
	Prefixlen uint32
	Filename  [255]uint8
	_         [1]byte
}

// loadOpensnoopWithFullPath returns the embedded CollectionSpec for opensnoopWithFullPath.
func loadOpensnoopWithFullPath() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_OpensnoopWithFullPathBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load opensnoopWithFullPath: %w", err)
	}

	return spec, err
}

// loadOpensnoopWithFullPathObjects loads opensnoopWithFullPath and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*opensnoopWithFullPathObjects
//	*opensnoopWithFullPathPrograms
//	*opensnoopWithFullPathMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadOpensnoopWithFullPathObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadOpensnoopWithFullPath()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// opensnoopWithFullPathSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type opensnoopWithFullPathSpecs struct {
	opensnoopWithFullPathProgramSpecs
	opensnoopWithFullPathMapSpecs
}

// opensnoopWithFullPathSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type opensnoopWithFullPathProgramSpecs struct {
	IgOpenE   *ebpf.ProgramSpec `ebpf:"ig_open_e"`
	IgOpenX   *ebpf.ProgramSpec `ebpf:"ig_open_x"`
	IgOpenatE *ebpf.ProgramSpec `ebpf:"ig_openat_e"`
	IgOpenatX *ebpf.ProgramSpec `ebpf:"ig_openat_x"`
}

// opensnoopWithFullPathMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type opensnoopWithFullPathMapSpecs struct {
	Bufs                 *ebpf.MapSpec `ebpf:"bufs"`
	Events               *ebpf.MapSpec `ebpf:"events"`
	GadgetMntnsFilterMap *ebpf.MapSpec `ebpf:"gadget_mntns_filter_map"`
	PrefixKeys           *ebpf.MapSpec `ebpf:"prefix_keys"`
	Prefixes             *ebpf.MapSpec `ebpf:"prefixes"`
	Start                *ebpf.MapSpec `ebpf:"start"`
}

// opensnoopWithFullPathObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadOpensnoopWithFullPathObjects or ebpf.CollectionSpec.LoadAndAssign.
type opensnoopWithFullPathObjects struct {
	opensnoopWithFullPathPrograms
	opensnoopWithFullPathMaps
}

func (o *opensnoopWithFullPathObjects) Close() error {
	return _OpensnoopWithFullPathClose(
		&o.opensnoopWithFullPathPrograms,
		&o.opensnoopWithFullPathMaps,
	)
}

// opensnoopWithFullPathMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadOpensnoopWithFullPathObjects or ebpf.CollectionSpec.LoadAndAssign.
type opensnoopWithFullPathMaps struct {
	Bufs                 *ebpf.Map `ebpf:"bufs"`
	Events               *ebpf.Map `ebpf:"events"`
	GadgetMntnsFilterMap *ebpf.Map `ebpf:"gadget_mntns_filter_map"`
	PrefixKeys           *ebpf.Map `ebpf:"prefix_keys"`
	Prefixes             *ebpf.Map `ebpf:"prefixes"`
	Start                *ebpf.Map `ebpf:"start"`
}

func (m *opensnoopWithFullPathMaps) Close() error {
	return _OpensnoopWithFullPathClose(
		m.Bufs,
		m.Events,
		m.GadgetMntnsFilterMap,
		m.PrefixKeys,
		m.Prefixes,
		m.Start,
	)
}

// opensnoopWithFullPathPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadOpensnoopWithFullPathObjects or ebpf.CollectionSpec.LoadAndAssign.
type opensnoopWithFullPathPrograms struct {
	IgOpenE   *ebpf.Program `ebpf:"ig_open_e"`
	IgOpenX   *ebpf.Program `ebpf:"ig_open_x"`
	IgOpenatE *ebpf.Program `ebpf:"ig_openat_e"`
	IgOpenatX *ebpf.Program `ebpf:"ig_openat_x"`
}

func (p *opensnoopWithFullPathPrograms) Close() error {
	return _OpensnoopWithFullPathClose(
		p.IgOpenE,
		p.IgOpenX,
		p.IgOpenatE,
		p.IgOpenatX,
	)
}

func _OpensnoopWithFullPathClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed opensnoopwithfullpath_bpfel.o
var _OpensnoopWithFullPathBytes []byte
