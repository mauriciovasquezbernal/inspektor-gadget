// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadIterSockets returns the embedded CollectionSpec for iterSockets.
func loadIterSockets() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_IterSocketsBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load iterSockets: %w", err)
	}

	return spec, err
}

// loadIterSocketsObjects loads iterSockets and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*iterSocketsObjects
//	*iterSocketsPrograms
//	*iterSocketsMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadIterSocketsObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadIterSockets()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// iterSocketsSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iterSocketsSpecs struct {
	iterSocketsProgramSpecs
	iterSocketsMapSpecs
}

// iterSocketsSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iterSocketsProgramSpecs struct {
	IgSocketsIt *ebpf.ProgramSpec `ebpf:"ig_sockets_it"`
}

// iterSocketsMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iterSocketsMapSpecs struct {
	GadgetMntnsFilterMap *ebpf.MapSpec `ebpf:"gadget_mntns_filter_map"`
}

// iterSocketsObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadIterSocketsObjects or ebpf.CollectionSpec.LoadAndAssign.
type iterSocketsObjects struct {
	iterSocketsPrograms
	iterSocketsMaps
}

func (o *iterSocketsObjects) Close() error {
	return _IterSocketsClose(
		&o.iterSocketsPrograms,
		&o.iterSocketsMaps,
	)
}

// iterSocketsMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadIterSocketsObjects or ebpf.CollectionSpec.LoadAndAssign.
type iterSocketsMaps struct {
	GadgetMntnsFilterMap *ebpf.Map `ebpf:"gadget_mntns_filter_map"`
}

func (m *iterSocketsMaps) Close() error {
	return _IterSocketsClose(
		m.GadgetMntnsFilterMap,
	)
}

// iterSocketsPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadIterSocketsObjects or ebpf.CollectionSpec.LoadAndAssign.
type iterSocketsPrograms struct {
	IgSocketsIt *ebpf.Program `ebpf:"ig_sockets_it"`
}

func (p *iterSocketsPrograms) Close() error {
	return _IterSocketsClose(
		p.IgSocketsIt,
	)
}

func _IterSocketsClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed itersockets_bpfel.o
var _IterSocketsBytes []byte
